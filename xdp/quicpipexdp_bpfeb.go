// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package xdp

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type quicpipexdpCid struct{ Cid [12]uint8 }

type quicpipexdpRedirect4 struct {
	Addr uint32
	Port uint16
	_    [2]byte
}

// loadQuicpipexdp returns the embedded CollectionSpec for quicpipexdp.
func loadQuicpipexdp() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_QuicpipexdpBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load quicpipexdp: %w", err)
	}

	return spec, err
}

// loadQuicpipexdpObjects loads quicpipexdp and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*quicpipexdpObjects
//	*quicpipexdpPrograms
//	*quicpipexdpMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadQuicpipexdpObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadQuicpipexdp()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// quicpipexdpSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type quicpipexdpSpecs struct {
	quicpipexdpProgramSpecs
	quicpipexdpMapSpecs
}

// quicpipexdpSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type quicpipexdpProgramSpecs struct {
	XdpQuicpipe *ebpf.ProgramSpec `ebpf:"xdp_quicpipe"`
}

// quicpipexdpMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type quicpipexdpMapSpecs struct {
	PortMap        *ebpf.MapSpec `ebpf:"port_map"`
	Redirect4Map   *ebpf.MapSpec `ebpf:"redirect4_map"`
	RejectedCidsRb *ebpf.MapSpec `ebpf:"rejected_cids_rb"`
}

// quicpipexdpObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadQuicpipexdpObjects or ebpf.CollectionSpec.LoadAndAssign.
type quicpipexdpObjects struct {
	quicpipexdpPrograms
	quicpipexdpMaps
}

func (o *quicpipexdpObjects) Close() error {
	return _QuicpipexdpClose(
		&o.quicpipexdpPrograms,
		&o.quicpipexdpMaps,
	)
}

// quicpipexdpMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadQuicpipexdpObjects or ebpf.CollectionSpec.LoadAndAssign.
type quicpipexdpMaps struct {
	PortMap        *ebpf.Map `ebpf:"port_map"`
	Redirect4Map   *ebpf.Map `ebpf:"redirect4_map"`
	RejectedCidsRb *ebpf.Map `ebpf:"rejected_cids_rb"`
}

func (m *quicpipexdpMaps) Close() error {
	return _QuicpipexdpClose(
		m.PortMap,
		m.Redirect4Map,
		m.RejectedCidsRb,
	)
}

// quicpipexdpPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadQuicpipexdpObjects or ebpf.CollectionSpec.LoadAndAssign.
type quicpipexdpPrograms struct {
	XdpQuicpipe *ebpf.Program `ebpf:"xdp_quicpipe"`
}

func (p *quicpipexdpPrograms) Close() error {
	return _QuicpipexdpClose(
		p.XdpQuicpipe,
	)
}

func _QuicpipexdpClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed quicpipexdp_bpfeb.o
var _QuicpipexdpBytes []byte
