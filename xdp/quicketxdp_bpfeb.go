// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package xdp

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type quicketxdpCid struct{ Cid [12]uint8 }

type quicketxdpRedirect4 struct {
	Addr uint32
	Port uint16
	_    [2]byte
}

// loadQuicketxdp returns the embedded CollectionSpec for quicketxdp.
func loadQuicketxdp() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_QuicketxdpBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load quicketxdp: %w", err)
	}

	return spec, err
}

// loadQuicketxdpObjects loads quicketxdp and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*quicketxdpObjects
//	*quicketxdpPrograms
//	*quicketxdpMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadQuicketxdpObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadQuicketxdp()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// quicketxdpSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type quicketxdpSpecs struct {
	quicketxdpProgramSpecs
	quicketxdpMapSpecs
}

// quicketxdpSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type quicketxdpProgramSpecs struct {
	XdpQuicket *ebpf.ProgramSpec `ebpf:"xdp_quicket"`
}

// quicketxdpMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type quicketxdpMapSpecs struct {
	PortMap        *ebpf.MapSpec `ebpf:"port_map"`
	Redirect4Map   *ebpf.MapSpec `ebpf:"redirect4_map"`
	RejectedCidsRb *ebpf.MapSpec `ebpf:"rejected_cids_rb"`
}

// quicketxdpObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadQuicketxdpObjects or ebpf.CollectionSpec.LoadAndAssign.
type quicketxdpObjects struct {
	quicketxdpPrograms
	quicketxdpMaps
}

func (o *quicketxdpObjects) Close() error {
	return _QuicketxdpClose(
		&o.quicketxdpPrograms,
		&o.quicketxdpMaps,
	)
}

// quicketxdpMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadQuicketxdpObjects or ebpf.CollectionSpec.LoadAndAssign.
type quicketxdpMaps struct {
	PortMap        *ebpf.Map `ebpf:"port_map"`
	Redirect4Map   *ebpf.Map `ebpf:"redirect4_map"`
	RejectedCidsRb *ebpf.Map `ebpf:"rejected_cids_rb"`
}

func (m *quicketxdpMaps) Close() error {
	return _QuicketxdpClose(
		m.PortMap,
		m.Redirect4Map,
		m.RejectedCidsRb,
	)
}

// quicketxdpPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadQuicketxdpObjects or ebpf.CollectionSpec.LoadAndAssign.
type quicketxdpPrograms struct {
	XdpQuicket *ebpf.Program `ebpf:"xdp_quicket"`
}

func (p *quicketxdpPrograms) Close() error {
	return _QuicketxdpClose(
		p.XdpQuicket,
	)
}

func _QuicketxdpClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed quicketxdp_bpfeb.o
var _QuicketxdpBytes []byte
